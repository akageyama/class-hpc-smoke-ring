var tipuesearch = {"pages":[{"title":" Burgers Equation ","text":"Burgers Equation 概要 これは、神戸大学情報知能工学科の講義 \"HPC\" （B3対象）用サンプルコードである。\n  1次元バーガース方程式を差分法とルンゲ・クッタ積分法で解き、可視化する。 目的 この後に説明する3次元Smoke-Ringシミュレーションコードを理解するため。 3次元Smoke-Ringシミュレーションコードでは\n  基本方程式は違うものの、アルゴリズム（差分法+ルンゲ・クッタ積分法）\n  とシミュレーションコードの構造が同じである。 実行方法 cd src ; make","tags":"home","loc":"index.html"},{"title":"constants.f90 – Burgers Equation","text":"Files dependent on this one sourcefile~~constants.f90~~AfferentGraph sourcefile~constants.f90 constants.f90 sourcefile~ut.f90 ut.f90 sourcefile~ut.f90->sourcefile~constants.f90 sourcefile~rk4.f90 rk4.f90 sourcefile~rk4.f90->sourcefile~constants.f90 sourcefile~rk4.f90->sourcefile~ut.f90 sourcefile~namelist.f90 namelist.f90 sourcefile~rk4.f90->sourcefile~namelist.f90 sourcefile~namelist.f90->sourcefile~constants.f90 sourcefile~namelist.f90->sourcefile~ut.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~constants.f90 sourcefile~main.f90->sourcefile~ut.f90 sourcefile~main.f90->sourcefile~rk4.f90 sourcefile~main.f90->sourcefile~namelist.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules constants_m Source Code constants.f90 Source Code !******************************************************************* !> author: Akira Kageyama !  date: 2020.01.15 ! !  Fortran定数と数学定数 ! !@note 定数であることが目で見てわかりやすいように全ての文字を !      大文字で書く。コンパイラには無意味であるので、 !      siとかSiといった変数を使わないように注意。 module constants_m implicit none ! << f90 constants >> integer , parameter :: SI = selected_int_kind ( 8 ) !! 単精度整数種別値 integer , parameter :: DI = selected_int_kind ( 16 ) !! 倍精度整数種別値 integer , parameter :: SR = selected_real_kind ( 6 ) !! 単精度実数種別値 integer , parameter :: DR = selected_real_kind ( 12 ) !! 倍精度実数種別値 ! << Mathematical constants >> real ( DR ), parameter :: PI = 3.1415926535897932_DR !! 円周率 real ( DR ), parameter :: TWOPI = PI * 2 !! 円周率の2倍 end module constants_m","tags":"","loc":"sourcefile/constants.f90.html"},{"title":"ut.f90 – Burgers Equation","text":"This file depends on sourcefile~~ut.f90~~EfferentGraph sourcefile~ut.f90 ut.f90 sourcefile~constants.f90 constants.f90 sourcefile~ut.f90->sourcefile~constants.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~ut.f90~~AfferentGraph sourcefile~ut.f90 ut.f90 sourcefile~rk4.f90 rk4.f90 sourcefile~rk4.f90->sourcefile~ut.f90 sourcefile~namelist.f90 namelist.f90 sourcefile~rk4.f90->sourcefile~namelist.f90 sourcefile~namelist.f90->sourcefile~ut.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~ut.f90 sourcefile~main.f90->sourcefile~rk4.f90 sourcefile~main.f90->sourcefile~namelist.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules ut_m Source Code ut.f90 Source Code !******************************************************************* !> author: Akira Kageyama !  license: MIT !  date: 2020.01.15 ! !  ユーティリティライブラリ ! !  @note これは教育用のコードである。 !        メモリの節約については全く考慮していない。 ! module ut_m use constants_m implicit none private public :: ut__assert , & ut__fatal , & ut__i2c3 , & ut__message interface ut__message !! 文字列（+ 数値）を標準出力に書き出すルーチンの多重定義 !! !! `message_decorated_なんとか` は飾り文字で囲む !! !! `message_型名[_型名]` は文字列の後のその型の数値を同じ行に書く module procedure message_decorated_str , & message_decorated_str_sint , & message_decorated_str_dint , & message_str , & message_str_double , & message_str_double_double , & message_str_sint , & message_str_dint , & message_str_sint_double , & message_str_dint_double end interface contains subroutine message_decorated_str ( mark , string ) !! 飾り文字でメーセージ文を囲む !! !!   Usage: !! !!      call message_decorated_str('#',\"This is a test.\") !! !!   Output: !! !!      ################### !!      # This is a test. # !!      ################### !! character , intent ( in ) :: mark !! この文字でメーセージを囲む character ( len =* ), intent ( in ) :: string !! 出力メーセージ（文字列） integer ( SI ) :: len len = len_trim ( string ) + 4 write ( 6 , * ) repeat ( mark , len ) write ( 6 , * ) mark // ' ' // trim ( string ) // ' ' // mark write ( 6 , * ) repeat ( mark , len ) end subroutine message_decorated_str subroutine message_decorated_str_sint ( mark , string , int ) !!  飾り文字でメーセージ文と単精度整数を囲む !! !!  Usage: !! !!     call mess...('#','This is message at nloop = ', nloop) !! character , intent ( in ) :: mark !! この文字で全体を囲む character ( len =* ), intent ( in ) :: string !! メーセージ文字列 integer ( SI ), intent ( in ) :: int !! 文字列の後に書く単精度整数 character ( len = 200 ) :: string_int write ( string_int , '(a,i8)' ) string , int call message_decorated_str ( mark , string_int ) end subroutine message_decorated_str_sint subroutine message_decorated_str_dint ( mark , string , int ) !! 飾り文字でメーセージ文と倍精度整数を囲む !! !! Usage: !! !!    call mess...('#','This is message at nloop = ', nloop) !! character , intent ( in ) :: mark !! この文字で全体を囲む character ( len =* ), intent ( in ) :: string !! メーセージ文字列 integer ( DI ), intent ( in ) :: int !! 文字列の後に書く倍精度整数 character ( len = 200 ) :: string_int write ( string_int , '(a,i16)' ) string , int call message_decorated_str ( mark , string_int ) end subroutine message_decorated_str_dint subroutine message_str ( string ) !! 普通のprint文 character ( len =* ), intent ( in ) :: string !! メーセージ文字列 write ( 6 , * ) string end subroutine message_str subroutine message_str_double ( string , double ) !! 文字列 + 倍精度実数2つの出力 character ( len =* ), intent ( in ) :: string !! メーセージ文字列 real ( DR ), intent ( in ) :: double !! 書き出される実数 write ( 6 , * ) string , double end subroutine message_str_double subroutine message_str_double_double ( string , double1 , double2 ) !! 飾り文字でメーセージ文と倍精度実数2つを囲む character ( len =* ), intent ( in ) :: string !! メーセージ文字列 real ( DR ), intent ( in ) :: double1 !! 書き出される実数1 real ( DR ), intent ( in ) :: double2 !! 書き出される実数2 write ( 6 , * ) string , double1 , double2 end subroutine message_str_double_double subroutine message_str_sint ( string , int ) !! 文字列 + 単精度整数の出力 character ( len =* ), intent ( in ) :: string !! メーセージ文字列 integer ( SI ), intent ( in ) :: int !! 書き出される整数 write ( 6 , * ) string , int end subroutine message_str_sint subroutine message_str_dint ( string , int ) !! 文字列 + 倍精度整数の出力 character ( len =* ), intent ( in ) :: string !! メーセージ文字列 integer ( DI ), intent ( in ) :: int !! 書き出される整数 write ( 6 , * ) string , int end subroutine message_str_dint subroutine message_str_sint_double ( string , i1 , d1 ) !! 文字列 + 単精度整数 + 倍精度実数の出力 character ( len =* ), intent ( in ) :: string !! メーセージ文字列 integer ( SI ), intent ( in ) :: i1 !! 書き出される整数 real ( DR ), intent ( in ) :: d1 !! 書き出される実数 write ( 6 , * ) string , i1 , d1 end subroutine message_str_sint_double subroutine message_str_dint_double ( string , i1 , d1 ) !! 文字列 + 倍精度整数 + 倍精度実数の出力 character ( len =* ), intent ( in ) :: string !! メーセージ文字列 integer ( DI ), intent ( in ) :: i1 !! 書き出される整数 real ( DR ), intent ( in ) :: d1 !! 書き出される実数 write ( 6 , * ) string , i1 , d1 end subroutine message_str_dint_double ! ! Private !=============== ! Public ! subroutine ut__assert ( must_be_true , message ) !! アサーション logical , intent ( in ) :: must_be_true !! 必須条件 character ( len =* ), intent ( in ) :: message !! 遺言 if ( . not . must_be_true ) then call ut__fatal ( message ) end if end subroutine ut__assert subroutine ut__fatal ( last_will ) !! 致命的エラー !! !!   Print the last_will and stop. !! character ( len =* ), intent ( in ) :: last_will !! 遺言 call ut__message ( '!' , last_will ) stop 'Program stopped by ut__fatal.' end subroutine ut__fatal function ut__i2c3 ( i ) !! 整数を文字列（3文字固定）に変換する !! !!  Convert an integer into 3 characters. !! !!             e.g., i=10 --> str3=\"010\" !! integer ( SI ), intent ( in ) :: i character ( len = 3 ) :: ut__i2c3 if ( i > 999 ) then ut__i2c3 = 'XXX' else write ( ut__i2c3 , '(i3.3)' ) i end if end function ut__i2c3 end module ut_m","tags":"","loc":"sourcefile/ut.f90.html"},{"title":"rk4.f90 – Burgers Equation","text":"This file depends on sourcefile~~rk4.f90~~EfferentGraph sourcefile~rk4.f90 rk4.f90 sourcefile~ut.f90 ut.f90 sourcefile~rk4.f90->sourcefile~ut.f90 sourcefile~namelist.f90 namelist.f90 sourcefile~rk4.f90->sourcefile~namelist.f90 sourcefile~constants.f90 constants.f90 sourcefile~rk4.f90->sourcefile~constants.f90 sourcefile~ut.f90->sourcefile~constants.f90 sourcefile~namelist.f90->sourcefile~ut.f90 sourcefile~namelist.f90->sourcefile~constants.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~rk4.f90~~AfferentGraph sourcefile~rk4.f90 rk4.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~rk4.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules rk4_m Source Code rk4.f90 Source Code !******************************************************************* !> author: Akira Kageyama !  license: MIT !  date: 2020.01.15 ! !  古典的4次ルンゲ=クッタ積分法モジュール ! !  @note これは教育用のコードである。 !        メモリの節約については全く考慮していない。 ! module rk4_m use constants_m use namelist_m use ut_m implicit none private public :: rk4__step contains function burgers_equation ( nx , dx , psi ) !! バーガーズ方程式の2階中心差分 !! 境界点を除いた内側の格子点を更新する !! @note !!   ここで更新していない境界上の格子点は、 !!   境界条件で更新する必要がある。 integer ( SI ), intent ( in ) :: nx !! 格子点数 real ( DR ), intent ( in ) :: dx !! 格子間隔 real ( DR ), dimension ( nx ), intent ( in ) :: psi !! 振幅（主変数） real ( DR ), dimension ( nx ) :: burgers_equation !! 積分後の配列を返す integer ( SI ) :: i real ( DR ) :: dx1 ! 一階差分演算子（定数）割り算削減のため定義 real ( DR ) :: dx2 ! 二階差分演算子（定数）割り算削減のため定義 dx1 = 1.0_DR / ( 2 * dx ) dx2 = namelist__get_double ( 'Diffusion_coeff' ) / ( dx ** 2 ) do i = 2 , nx - 1 burgers_equation ( i ) = - psi ( i ) * dx1 * ( psi ( i + 1 ) - psi ( i - 1 )) & + dx2 * ( psi ( i + 1 ) - 2 * psi ( i ) + psi ( i - 1 )) end do end function burgers_equation ! ! Private !========== ! Public ! function rk4__step ( nth , dt , dx , psi , dpsi_prev ) result ( dpsi_new ) !! 4段4次のRunge-Kutta法による1ステップ積分の実行 !! @note 教科書のアルゴリズムをそのまま実装している。 !!       メモリを贅沢に使っていることに注意。 character ( len = 3 ), intent ( in ) :: nth !! 4段の何番目か real ( DR ), intent ( in ) :: dt !! 積分時間刻み real ( DR ), intent ( in ) :: dx !! 格子間隔 real ( DR ), dimension (:), intent ( in ) :: psi !! 被積分関数 real ( DR ), dimension ( size ( psi , dim = 1 )), intent ( in ), optional :: dpsi_prev !! 前段の増分 real ( DR ), dimension ( size ( psi , dim = 1 )) :: dpsi_new !! 現段の増分 !! 配列で返す real ( DR ), dimension ( size ( psi , dim = 1 )) :: psi_ ! 作業配列 ! 古典的な4段4次のRunge-Kutta積分法 select case ( nth ) case ( '1st' ) ! 第1段 dpsi_new (:) = dt * burgers_equation ( size ( psi , dim = 1 ), dx , psi ) case ( '2nd' ) ! 第2段 psi_ (:) = psi (:) + dpsi_prev (:) * 0.5_DR dpsi_new (:) = dt * burgers_equation ( size ( psi , dim = 1 ), dx , psi_ ) case ( '3rd' ) ! 第3段 psi_ (:) = psi (:) + dpsi_prev (:) * 0.5_DR dpsi_new (:) = dt * burgers_equation ( size ( psi , dim = 1 ), dx , psi_ ) case ( '4th' ) ! 第4段 psi_ (:) = psi (:) + dpsi_prev (:) dpsi_new (:) = dt * burgers_equation ( size ( psi , dim = 1 ), dx , psi_ ) case default call ut__fatal ( '<rk4> Invalid step.' ) end select end function rk4__step end module rk4_m","tags":"","loc":"sourcefile/rk4.f90.html"},{"title":"main.f90 – Burgers Equation","text":"This file depends on sourcefile~~main.f90~~EfferentGraph sourcefile~main.f90 main.f90 sourcefile~ut.f90 ut.f90 sourcefile~main.f90->sourcefile~ut.f90 sourcefile~rk4.f90 rk4.f90 sourcefile~main.f90->sourcefile~rk4.f90 sourcefile~namelist.f90 namelist.f90 sourcefile~main.f90->sourcefile~namelist.f90 sourcefile~constants.f90 constants.f90 sourcefile~main.f90->sourcefile~constants.f90 sourcefile~ut.f90->sourcefile~constants.f90 sourcefile~rk4.f90->sourcefile~ut.f90 sourcefile~rk4.f90->sourcefile~namelist.f90 sourcefile~rk4.f90->sourcefile~constants.f90 sourcefile~namelist.f90->sourcefile~ut.f90 sourcefile~namelist.f90->sourcefile~constants.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Programs main Source Code main.f90 Source Code !******************************************************************* !> author: Akira Kageyama !  date: 2020.01.15 ! !  バーガース方程式を差分法+ルンゲ・クッタ積分法で解き、可視化する。 ! !  神戸大学情報知能工学科の講義 \"HPC\" （B3対象）用サンプルコード ! !### 目的 !  この後に説明する3次元Smoke-Ringシミュレーションコードを理解するため。 ! !  3次元Smoke-Ringシミュレーションコードでは !  基本方程式は違うものの、アルゴリズム（差分法+ルンゲ・クッタ積分法） !  とシミュレーションコードの構造が同じである。 ! !### 実行方法 !  cd src ; make !  cd ../slice_grapher; make ! program main use constants_m use ut_m use namelist_m use rk4_m implicit none real ( DR ), dimension (:), allocatable :: xpos ! grid position, size=nx real ( DR ), dimension (:), allocatable :: psi ! size=nx real ( DR ), dimension (:), allocatable :: dpsi01 , dpsi02 , & ! used for RK4. dpsi03 , dpsi04 integer ( SI ) :: i , nx integer ( DI ) :: nloop integer ( DI ) :: nloop_max = 1000 real ( DR ) :: dx , dt , time , x real ( DR ), parameter :: ONE_SIXTH = 1.0_DR / 6.0_DR real ( DR ), parameter :: CFL_FACTOR = 0.4_DR !    1    2    3    4                                    NX-1  NX !    !----!----!----!----!----!--             --!----!----!----! !         !               \\  /                                 ! !         !                dx = TWOPI / (nx-2)                 ! !    x=-PI!<---------------------- TWOPI --------------------->!x=+PI !         !                                                    ! !         !                                                    ! !  --!----!                                                !---!-- !  NX-1  NX                                                1   2 call namelist__read nx = namelist__get_integer ( 'Nx' ) dx = TWOPI / ( nx - 2 ) ! See above fig. dt = dx ** 2 / namelist__get_double ( 'Diffusion_coeff' ) * CFL_FACTOR allocate ( xpos ( nx ), psi ( nx )) allocate ( dpsi01 ( nx )) allocate ( dpsi02 ( nx )) allocate ( dpsi03 ( nx )) allocate ( dpsi04 ( nx )) xpos (:) = 0.0_DR psi (:) = 0.0_DR dpsi01 (:) = 0.0_DR dpsi02 (:) = 0.0_DR dpsi03 (:) = 0.0_DR dpsi04 (:) = 0.0_DR do i = 1 , nx xpos ( i ) = - PI + dx * ( i - 2 ) ! Grid location end do do i = 1 , nx x = xpos ( i ) psi ( i ) = 0.8_DR + 0.2_DR * cos ( x ) ! Initial condition end do call ut__message ( 'initial check: nx = ' , nx ) call ut__message ( 'initial check: dx = ' , dx ) time = 0.0_DR call iSave ! Save the initial condition profile to the disk. do nloop = 1 , nloop_max !--< Runge-Kutta step 1 >--! dpsi01 (:) = rk4__step ( '1st' , dt , dx , psi ) call iBoundary_condition ( dpsi01 ) !--< Runge-Kutta step 2 >--! dpsi02 (:) = rk4__step ( '2nd' , dt , dx , psi , dpsi01 ) call iBoundary_condition ( dpsi02 ) !--< Runge-Kutta step 3 >--! dpsi03 (:) = rk4__step ( '3rd' , dt , dx , psi , dpsi02 ) call iBoundary_condition ( dpsi03 ) !--< Runge-Kutta step 4 >--! dpsi04 (:) = rk4__step ( '4th' , dt , dx , psi , dpsi03 ) call iBoundary_condition ( dpsi04 ) time = time + dt psi (:) = psi (:) + ONE_SIXTH * ( dpsi01 (:) & + 2 * dpsi02 (:) & + 2 * dpsi03 (:) & + dpsi04 (:)) if ( mod ( nloop , 4 ) == 0 ) then call iSave ! Save the profile to the disk. end if end do contains subroutine iBoundary_condition ( psi ) real ( DR ), dimension ( nx ), intent ( inout ) :: psi psi ( 1 ) = psi ( nx - 1 ) psi ( nx ) = psi ( 2 ) end subroutine iBoundary_condition subroutine iSave integer ( SI ), save :: counter = 0 integer ( SI ) :: i open ( 10 , file = \"output.data\" // '.' // ut__i2c3 ( counter )) do i = 1 , nx write ( 10 , * ) xpos ( i ), psi ( i ) end do close ( 10 ) counter = counter + 1 call ut__message ( \" Data saved at nloop, time = \" , nloop , time ) end subroutine iSave end program main","tags":"","loc":"sourcefile/main.f90.html"},{"title":"namelist.f90 – Burgers Equation","text":"This file depends on sourcefile~~namelist.f90~~EfferentGraph sourcefile~namelist.f90 namelist.f90 sourcefile~ut.f90 ut.f90 sourcefile~namelist.f90->sourcefile~ut.f90 sourcefile~constants.f90 constants.f90 sourcefile~namelist.f90->sourcefile~constants.f90 sourcefile~ut.f90->sourcefile~constants.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~namelist.f90~~AfferentGraph sourcefile~namelist.f90 namelist.f90 sourcefile~rk4.f90 rk4.f90 sourcefile~rk4.f90->sourcefile~namelist.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~namelist.f90 sourcefile~main.f90->sourcefile~rk4.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules namelist_m Source Code namelist.f90 Source Code !******************************************************************* !> author: Akira Kageyama !  date: 2020.01.15 ! !  Fortranのnamelist機能を使い、入力データを読み込み、 !  管理するモジュール ! !### 目的 ! !  namelistデータの一元管理 ! !### 機能 ! !  入力パラメータを読み込み、保持する。要求に応じて値を教える。 ! !@note !  実行ファイルのコマンドオプションでnamelistファイルを !  指定すると仮定している。 ! !@note !  namelistファイルの内容を変更した場合は: !    (1) 少し下の行にあるこのファイルのnamelist文を書き換える。 !    (2) namelist__readを書き換える。 !    (3) namelist__get_double, _integer等の対応する行も書き換える。 ! !@note !  浮動小数点数（double）や整数以外のデータをnamelistで受け取る !  場合は、namelsit__get_logical等、新たに作る必要がある ! module namelist_m use constants_m use ut_m implicit none private public :: & namelist__get_double , & namelist__get_integer , & namelist__read logical , save :: Read_done = . false . integer ( SI ) :: Nx real ( DR ) :: Diffusion_coeff namelist / data00 / Nx ! namelistデータファイルを namelist / data01 / Diffusion_coeff ! 書き換えたらここも変更する contains function namelist__get_double ( variable ) !! このモジュールの外からの問い合わせに応じてnamelistデータを返す。 !! その変数が倍精度浮動小数点数の場合。 !! この関数の前にnamelist__readが呼ばれている必要がある。 !! この点はassertで確認している。 character ( len =* ), intent ( in ) :: variable !! 問い合わせ変数 real ( DR ) :: namelist__get_double !! 保持データをそのまま返す call ut__assert ( Read_done , & '<namelist__get_double> Read namelist first.' ) select case ( variable ) case ( 'Diffusion_coeff' ) namelist__get_double = Diffusion_coeff case default call ut__message ( '? arg = ' , variable ) call ut__fatal ( '<namelist__get_double> not in the namelist?' ) end select end function namelist__get_double function namelist__get_integer ( variable ) !! このモジュールの外からの問い合わせに応じてnamelistデータを返す。 !! その変数が整数の場合。 !! この関数の前にnamelist__readが呼ばれている必要がある。 !! この点はassertで確認している。 character ( len =* ), intent ( in ) :: variable integer ( SI ) :: namelist__get_integer call ut__assert ( Read_done , & '<namelist__get_integer> Read namelist first.' ) select case ( variable ) case ( 'Nx' ) namelist__get_integer = Nx case default call ut__message ( '? arg = ' , variable ) call ut__fatal ( '<namelist__get_integer> not in the namelist?' ) end select end function namelist__get_integer subroutine namelist__read !! namelistファイルをディスクから読み込む。 !! ファイル名はコマンド第一引数。 !! @note ファイル番号10番をここで使っている。他の場所で !! 10番を使う（開きっぱなしにする）場合は問題だが、 !! その場所でもここのようにopenした後、closeしていれば !! 特に問題ではない。 !! !! @note namelistデータファイルの内容を変更する場合は !! 当然ながら以下のread文も適宜変更すること。 !! integer ( SI ), parameter :: FILENAME_MAX_LENGTH = 200 ! 200文字もあれば十分だろう。 character ( len = FILENAME_MAX_LENGTH ) :: filename !--------------------------------------- ! namelistデータファイルの中身 ! &data00 Nx = 500 / ! &data01 Diffusion_coeff = 0.005 / !--------------------------------------- call ut__assert ( command_argument_count () == 1 , & \"Usage: berguers param_file\" ) call get_command_argument ( 1 , filename ) open ( 10 , file = trim ( filename )) read ( 10 , nml = data00 ) read ( 10 , nml = data01 ) close ( 10 ) write ( 6 , nml = data00 ) write ( 6 , nml = data01 ) Read_done = . true . end subroutine namelist__read end module namelist_m","tags":"","loc":"sourcefile/namelist.f90.html"},{"title":"ut__i2c3 – Burgers Equation","text":"public function ut__i2c3(i) 整数を文字列（3文字固定）に変換する Convert an integer into 3 characters. e.g., i=10 --> str3=\"010\" Arguments Type Intent Optional Attributes Name integer(kind=SI), intent(in) :: i Return Value character(len=3) Called by proc~~ut__i2c3~~CalledByGraph proc~ut__i2c3 ut__i2c3 proc~isave iSave proc~isave->proc~ut__i2c3 program~main main program~main->proc~isave Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code ut__i2c3 Source Code function ut__i2c3 ( i ) !! 整数を文字列（3文字固定）に変換する !! !!  Convert an integer into 3 characters. !! !!             e.g., i=10 --> str3=\"010\" !! integer ( SI ), intent ( in ) :: i character ( len = 3 ) :: ut__i2c3 if ( i > 999 ) then ut__i2c3 = 'XXX' else write ( ut__i2c3 , '(i3.3)' ) i end if end function ut__i2c3","tags":"","loc":"proc/ut__i2c3.html"},{"title":"message_decorated_str – Burgers Equation","text":"private subroutine message_decorated_str(mark, string) 飾り文字でメーセージ文を囲む Usage: call message_decorated_str('#',\"This is a test.\") Output: ###################\n  # This is a test. #\n  ################### Arguments Type Intent Optional Attributes Name character, intent(in) :: mark この文字でメーセージを囲む character(len=*), intent(in) :: string 出力メーセージ（文字列） Called by proc~~message_decorated_str~~CalledByGraph proc~message_decorated_str message_decorated_str proc~message_decorated_str_dint message_decorated_str_dint proc~message_decorated_str_dint->proc~message_decorated_str proc~message_decorated_str_sint message_decorated_str_sint proc~message_decorated_str_sint->proc~message_decorated_str interface~ut__message ut__message interface~ut__message->proc~message_decorated_str interface~ut__message->proc~message_decorated_str_dint interface~ut__message->proc~message_decorated_str_sint program~main main program~main->interface~ut__message proc~isave iSave program~main->proc~isave proc~namelist__get_double namelist__get_double program~main->proc~namelist__get_double proc~namelist__get_integer namelist__get_integer program~main->proc~namelist__get_integer proc~rk4__step rk4__step program~main->proc~rk4__step proc~isave->interface~ut__message proc~ut__fatal ut__fatal proc~ut__fatal->interface~ut__message proc~namelist__get_double->interface~ut__message proc~namelist__get_double->proc~ut__fatal proc~ut__assert ut__assert proc~namelist__get_double->proc~ut__assert proc~namelist__get_integer->interface~ut__message proc~namelist__get_integer->proc~ut__fatal proc~namelist__get_integer->proc~ut__assert proc~burgers_equation burgers_equation proc~burgers_equation->proc~namelist__get_double proc~rk4__step->proc~ut__fatal proc~rk4__step->proc~burgers_equation proc~ut__assert->proc~ut__fatal var panprocmessage_decorated_strCalledByGraph = svgPanZoom('#procmessage_decorated_strCalledByGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code message_decorated_str Source Code subroutine message_decorated_str ( mark , string ) !! 飾り文字でメーセージ文を囲む !! !!   Usage: !! !!      call message_decorated_str('#',\"This is a test.\") !! !!   Output: !! !!      ################### !!      # This is a test. # !!      ################### !! character , intent ( in ) :: mark !! この文字でメーセージを囲む character ( len =* ), intent ( in ) :: string !! 出力メーセージ（文字列） integer ( SI ) :: len len = len_trim ( string ) + 4 write ( 6 , * ) repeat ( mark , len ) write ( 6 , * ) mark // ' ' // trim ( string ) // ' ' // mark write ( 6 , * ) repeat ( mark , len ) end subroutine message_decorated_str","tags":"","loc":"proc/message_decorated_str.html"},{"title":"message_decorated_str_dint – Burgers Equation","text":"private subroutine message_decorated_str_dint(mark, string, int) 飾り文字でメーセージ文と倍精度整数を囲む Usage: call mess...('#','This is message at nloop = ', nloop) Arguments Type Intent Optional Attributes Name character, intent(in) :: mark この文字で全体を囲む character(len=*), intent(in) :: string メーセージ文字列 integer(kind=DI), intent(in) :: int 文字列の後に書く倍精度整数 Calls proc~~message_decorated_str_dint~~CallsGraph proc~message_decorated_str_dint message_decorated_str_dint proc~message_decorated_str message_decorated_str proc~message_decorated_str_dint->proc~message_decorated_str Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~message_decorated_str_dint~~CalledByGraph proc~message_decorated_str_dint message_decorated_str_dint interface~ut__message ut__message interface~ut__message->proc~message_decorated_str_dint program~main main program~main->interface~ut__message proc~isave iSave program~main->proc~isave proc~namelist__get_double namelist__get_double program~main->proc~namelist__get_double proc~namelist__get_integer namelist__get_integer program~main->proc~namelist__get_integer proc~rk4__step rk4__step program~main->proc~rk4__step proc~isave->interface~ut__message proc~ut__fatal ut__fatal proc~ut__fatal->interface~ut__message proc~namelist__get_double->interface~ut__message proc~namelist__get_double->proc~ut__fatal proc~ut__assert ut__assert proc~namelist__get_double->proc~ut__assert proc~namelist__get_integer->interface~ut__message proc~namelist__get_integer->proc~ut__fatal proc~namelist__get_integer->proc~ut__assert proc~burgers_equation burgers_equation proc~burgers_equation->proc~namelist__get_double proc~rk4__step->proc~ut__fatal proc~rk4__step->proc~burgers_equation proc~ut__assert->proc~ut__fatal var panprocmessage_decorated_str_dintCalledByGraph = svgPanZoom('#procmessage_decorated_str_dintCalledByGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code message_decorated_str_dint Source Code subroutine message_decorated_str_dint ( mark , string , int ) !! 飾り文字でメーセージ文と倍精度整数を囲む !! !! Usage: !! !!    call mess...('#','This is message at nloop = ', nloop) !! character , intent ( in ) :: mark !! この文字で全体を囲む character ( len =* ), intent ( in ) :: string !! メーセージ文字列 integer ( DI ), intent ( in ) :: int !! 文字列の後に書く倍精度整数 character ( len = 200 ) :: string_int write ( string_int , '(a,i16)' ) string , int call message_decorated_str ( mark , string_int ) end subroutine message_decorated_str_dint","tags":"","loc":"proc/message_decorated_str_dint.html"},{"title":"message_decorated_str_sint – Burgers Equation","text":"private subroutine message_decorated_str_sint(mark, string, int) 飾り文字でメーセージ文と単精度整数を囲む Usage: call mess...('#','This is message at nloop = ', nloop) Arguments Type Intent Optional Attributes Name character, intent(in) :: mark この文字で全体を囲む character(len=*), intent(in) :: string メーセージ文字列 integer(kind=SI), intent(in) :: int 文字列の後に書く単精度整数 Calls proc~~message_decorated_str_sint~~CallsGraph proc~message_decorated_str_sint message_decorated_str_sint proc~message_decorated_str message_decorated_str proc~message_decorated_str_sint->proc~message_decorated_str Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~message_decorated_str_sint~~CalledByGraph proc~message_decorated_str_sint message_decorated_str_sint interface~ut__message ut__message interface~ut__message->proc~message_decorated_str_sint program~main main program~main->interface~ut__message proc~isave iSave program~main->proc~isave proc~namelist__get_double namelist__get_double program~main->proc~namelist__get_double proc~namelist__get_integer namelist__get_integer program~main->proc~namelist__get_integer proc~rk4__step rk4__step program~main->proc~rk4__step proc~isave->interface~ut__message proc~ut__fatal ut__fatal proc~ut__fatal->interface~ut__message proc~namelist__get_double->interface~ut__message proc~namelist__get_double->proc~ut__fatal proc~ut__assert ut__assert proc~namelist__get_double->proc~ut__assert proc~namelist__get_integer->interface~ut__message proc~namelist__get_integer->proc~ut__fatal proc~namelist__get_integer->proc~ut__assert proc~burgers_equation burgers_equation proc~burgers_equation->proc~namelist__get_double proc~rk4__step->proc~ut__fatal proc~rk4__step->proc~burgers_equation proc~ut__assert->proc~ut__fatal var panprocmessage_decorated_str_sintCalledByGraph = svgPanZoom('#procmessage_decorated_str_sintCalledByGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code message_decorated_str_sint Source Code subroutine message_decorated_str_sint ( mark , string , int ) !!  飾り文字でメーセージ文と単精度整数を囲む !! !!  Usage: !! !!     call mess...('#','This is message at nloop = ', nloop) !! character , intent ( in ) :: mark !! この文字で全体を囲む character ( len =* ), intent ( in ) :: string !! メーセージ文字列 integer ( SI ), intent ( in ) :: int !! 文字列の後に書く単精度整数 character ( len = 200 ) :: string_int write ( string_int , '(a,i8)' ) string , int call message_decorated_str ( mark , string_int ) end subroutine message_decorated_str_sint","tags":"","loc":"proc/message_decorated_str_sint.html"},{"title":"message_str – Burgers Equation","text":"private subroutine message_str(string) 普通のprint文 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string メーセージ文字列 Called by proc~~message_str~~CalledByGraph proc~message_str message_str interface~ut__message ut__message interface~ut__message->proc~message_str program~main main program~main->interface~ut__message proc~isave iSave program~main->proc~isave proc~namelist__get_double namelist__get_double program~main->proc~namelist__get_double proc~namelist__get_integer namelist__get_integer program~main->proc~namelist__get_integer proc~rk4__step rk4__step program~main->proc~rk4__step proc~isave->interface~ut__message proc~ut__fatal ut__fatal proc~ut__fatal->interface~ut__message proc~namelist__get_double->interface~ut__message proc~namelist__get_double->proc~ut__fatal proc~ut__assert ut__assert proc~namelist__get_double->proc~ut__assert proc~namelist__get_integer->interface~ut__message proc~namelist__get_integer->proc~ut__fatal proc~namelist__get_integer->proc~ut__assert proc~burgers_equation burgers_equation proc~burgers_equation->proc~namelist__get_double proc~rk4__step->proc~ut__fatal proc~rk4__step->proc~burgers_equation proc~ut__assert->proc~ut__fatal var panprocmessage_strCalledByGraph = svgPanZoom('#procmessage_strCalledByGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code message_str Source Code subroutine message_str ( string ) !! 普通のprint文 character ( len =* ), intent ( in ) :: string !! メーセージ文字列 write ( 6 , * ) string end subroutine message_str","tags":"","loc":"proc/message_str.html"},{"title":"message_str_dint – Burgers Equation","text":"private subroutine message_str_dint(string, int) 文字列 + 倍精度整数の出力 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string メーセージ文字列 integer(kind=DI), intent(in) :: int 書き出される整数 Called by proc~~message_str_dint~~CalledByGraph proc~message_str_dint message_str_dint interface~ut__message ut__message interface~ut__message->proc~message_str_dint program~main main program~main->interface~ut__message proc~isave iSave program~main->proc~isave proc~namelist__get_double namelist__get_double program~main->proc~namelist__get_double proc~namelist__get_integer namelist__get_integer program~main->proc~namelist__get_integer proc~rk4__step rk4__step program~main->proc~rk4__step proc~isave->interface~ut__message proc~ut__fatal ut__fatal proc~ut__fatal->interface~ut__message proc~namelist__get_double->interface~ut__message proc~namelist__get_double->proc~ut__fatal proc~ut__assert ut__assert proc~namelist__get_double->proc~ut__assert proc~namelist__get_integer->interface~ut__message proc~namelist__get_integer->proc~ut__fatal proc~namelist__get_integer->proc~ut__assert proc~burgers_equation burgers_equation proc~burgers_equation->proc~namelist__get_double proc~rk4__step->proc~ut__fatal proc~rk4__step->proc~burgers_equation proc~ut__assert->proc~ut__fatal var panprocmessage_str_dintCalledByGraph = svgPanZoom('#procmessage_str_dintCalledByGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code message_str_dint Source Code subroutine message_str_dint ( string , int ) !! 文字列 + 倍精度整数の出力 character ( len =* ), intent ( in ) :: string !! メーセージ文字列 integer ( DI ), intent ( in ) :: int !! 書き出される整数 write ( 6 , * ) string , int end subroutine message_str_dint","tags":"","loc":"proc/message_str_dint.html"},{"title":"message_str_dint_double – Burgers Equation","text":"private subroutine message_str_dint_double(string, i1, d1) 文字列 + 倍精度整数 + 倍精度実数の出力 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string メーセージ文字列 integer(kind=DI), intent(in) :: i1 書き出される整数 real(kind=DR), intent(in) :: d1 書き出される実数 Called by proc~~message_str_dint_double~~CalledByGraph proc~message_str_dint_double message_str_dint_double interface~ut__message ut__message interface~ut__message->proc~message_str_dint_double program~main main program~main->interface~ut__message proc~isave iSave program~main->proc~isave proc~namelist__get_double namelist__get_double program~main->proc~namelist__get_double proc~namelist__get_integer namelist__get_integer program~main->proc~namelist__get_integer proc~rk4__step rk4__step program~main->proc~rk4__step proc~isave->interface~ut__message proc~ut__fatal ut__fatal proc~ut__fatal->interface~ut__message proc~namelist__get_double->interface~ut__message proc~namelist__get_double->proc~ut__fatal proc~ut__assert ut__assert proc~namelist__get_double->proc~ut__assert proc~namelist__get_integer->interface~ut__message proc~namelist__get_integer->proc~ut__fatal proc~namelist__get_integer->proc~ut__assert proc~burgers_equation burgers_equation proc~burgers_equation->proc~namelist__get_double proc~rk4__step->proc~ut__fatal proc~rk4__step->proc~burgers_equation proc~ut__assert->proc~ut__fatal var panprocmessage_str_dint_doubleCalledByGraph = svgPanZoom('#procmessage_str_dint_doubleCalledByGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code message_str_dint_double Source Code subroutine message_str_dint_double ( string , i1 , d1 ) !! 文字列 + 倍精度整数 + 倍精度実数の出力 character ( len =* ), intent ( in ) :: string !! メーセージ文字列 integer ( DI ), intent ( in ) :: i1 !! 書き出される整数 real ( DR ), intent ( in ) :: d1 !! 書き出される実数 write ( 6 , * ) string , i1 , d1 end subroutine message_str_dint_double","tags":"","loc":"proc/message_str_dint_double.html"},{"title":"message_str_double – Burgers Equation","text":"private subroutine message_str_double(string, double) 文字列 + 倍精度実数2つの出力 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string メーセージ文字列 real(kind=DR), intent(in) :: double 書き出される実数 Called by proc~~message_str_double~~CalledByGraph proc~message_str_double message_str_double interface~ut__message ut__message interface~ut__message->proc~message_str_double program~main main program~main->interface~ut__message proc~isave iSave program~main->proc~isave proc~namelist__get_double namelist__get_double program~main->proc~namelist__get_double proc~namelist__get_integer namelist__get_integer program~main->proc~namelist__get_integer proc~rk4__step rk4__step program~main->proc~rk4__step proc~isave->interface~ut__message proc~ut__fatal ut__fatal proc~ut__fatal->interface~ut__message proc~namelist__get_double->interface~ut__message proc~namelist__get_double->proc~ut__fatal proc~ut__assert ut__assert proc~namelist__get_double->proc~ut__assert proc~namelist__get_integer->interface~ut__message proc~namelist__get_integer->proc~ut__fatal proc~namelist__get_integer->proc~ut__assert proc~burgers_equation burgers_equation proc~burgers_equation->proc~namelist__get_double proc~rk4__step->proc~ut__fatal proc~rk4__step->proc~burgers_equation proc~ut__assert->proc~ut__fatal var panprocmessage_str_doubleCalledByGraph = svgPanZoom('#procmessage_str_doubleCalledByGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code message_str_double Source Code subroutine message_str_double ( string , double ) !! 文字列 + 倍精度実数2つの出力 character ( len =* ), intent ( in ) :: string !! メーセージ文字列 real ( DR ), intent ( in ) :: double !! 書き出される実数 write ( 6 , * ) string , double end subroutine message_str_double","tags":"","loc":"proc/message_str_double.html"},{"title":"message_str_double_double – Burgers Equation","text":"private subroutine message_str_double_double(string, double1, double2) 飾り文字でメーセージ文と倍精度実数2つを囲む Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string メーセージ文字列 real(kind=DR), intent(in) :: double1 書き出される実数1 real(kind=DR), intent(in) :: double2 書き出される実数2 Called by proc~~message_str_double_double~~CalledByGraph proc~message_str_double_double message_str_double_double interface~ut__message ut__message interface~ut__message->proc~message_str_double_double program~main main program~main->interface~ut__message proc~isave iSave program~main->proc~isave proc~namelist__get_double namelist__get_double program~main->proc~namelist__get_double proc~namelist__get_integer namelist__get_integer program~main->proc~namelist__get_integer proc~rk4__step rk4__step program~main->proc~rk4__step proc~isave->interface~ut__message proc~ut__fatal ut__fatal proc~ut__fatal->interface~ut__message proc~namelist__get_double->interface~ut__message proc~namelist__get_double->proc~ut__fatal proc~ut__assert ut__assert proc~namelist__get_double->proc~ut__assert proc~namelist__get_integer->interface~ut__message proc~namelist__get_integer->proc~ut__fatal proc~namelist__get_integer->proc~ut__assert proc~burgers_equation burgers_equation proc~burgers_equation->proc~namelist__get_double proc~rk4__step->proc~ut__fatal proc~rk4__step->proc~burgers_equation proc~ut__assert->proc~ut__fatal var panprocmessage_str_double_doubleCalledByGraph = svgPanZoom('#procmessage_str_double_doubleCalledByGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code message_str_double_double Source Code subroutine message_str_double_double ( string , double1 , double2 ) !! 飾り文字でメーセージ文と倍精度実数2つを囲む character ( len =* ), intent ( in ) :: string !! メーセージ文字列 real ( DR ), intent ( in ) :: double1 !! 書き出される実数1 real ( DR ), intent ( in ) :: double2 !! 書き出される実数2 write ( 6 , * ) string , double1 , double2 end subroutine message_str_double_double","tags":"","loc":"proc/message_str_double_double.html"},{"title":"message_str_sint – Burgers Equation","text":"private subroutine message_str_sint(string, int) 文字列 + 単精度整数の出力 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string メーセージ文字列 integer(kind=SI), intent(in) :: int 書き出される整数 Called by proc~~message_str_sint~~CalledByGraph proc~message_str_sint message_str_sint interface~ut__message ut__message interface~ut__message->proc~message_str_sint program~main main program~main->interface~ut__message proc~isave iSave program~main->proc~isave proc~namelist__get_double namelist__get_double program~main->proc~namelist__get_double proc~namelist__get_integer namelist__get_integer program~main->proc~namelist__get_integer proc~rk4__step rk4__step program~main->proc~rk4__step proc~isave->interface~ut__message proc~ut__fatal ut__fatal proc~ut__fatal->interface~ut__message proc~namelist__get_double->interface~ut__message proc~namelist__get_double->proc~ut__fatal proc~ut__assert ut__assert proc~namelist__get_double->proc~ut__assert proc~namelist__get_integer->interface~ut__message proc~namelist__get_integer->proc~ut__fatal proc~namelist__get_integer->proc~ut__assert proc~burgers_equation burgers_equation proc~burgers_equation->proc~namelist__get_double proc~rk4__step->proc~ut__fatal proc~rk4__step->proc~burgers_equation proc~ut__assert->proc~ut__fatal var panprocmessage_str_sintCalledByGraph = svgPanZoom('#procmessage_str_sintCalledByGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code message_str_sint Source Code subroutine message_str_sint ( string , int ) !! 文字列 + 単精度整数の出力 character ( len =* ), intent ( in ) :: string !! メーセージ文字列 integer ( SI ), intent ( in ) :: int !! 書き出される整数 write ( 6 , * ) string , int end subroutine message_str_sint","tags":"","loc":"proc/message_str_sint.html"},{"title":"message_str_sint_double – Burgers Equation","text":"private subroutine message_str_sint_double(string, i1, d1) 文字列 + 単精度整数 + 倍精度実数の出力 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string メーセージ文字列 integer(kind=SI), intent(in) :: i1 書き出される整数 real(kind=DR), intent(in) :: d1 書き出される実数 Called by proc~~message_str_sint_double~~CalledByGraph proc~message_str_sint_double message_str_sint_double interface~ut__message ut__message interface~ut__message->proc~message_str_sint_double program~main main program~main->interface~ut__message proc~isave iSave program~main->proc~isave proc~namelist__get_double namelist__get_double program~main->proc~namelist__get_double proc~namelist__get_integer namelist__get_integer program~main->proc~namelist__get_integer proc~rk4__step rk4__step program~main->proc~rk4__step proc~isave->interface~ut__message proc~ut__fatal ut__fatal proc~ut__fatal->interface~ut__message proc~namelist__get_double->interface~ut__message proc~namelist__get_double->proc~ut__fatal proc~ut__assert ut__assert proc~namelist__get_double->proc~ut__assert proc~namelist__get_integer->interface~ut__message proc~namelist__get_integer->proc~ut__fatal proc~namelist__get_integer->proc~ut__assert proc~burgers_equation burgers_equation proc~burgers_equation->proc~namelist__get_double proc~rk4__step->proc~ut__fatal proc~rk4__step->proc~burgers_equation proc~ut__assert->proc~ut__fatal var panprocmessage_str_sint_doubleCalledByGraph = svgPanZoom('#procmessage_str_sint_doubleCalledByGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code message_str_sint_double Source Code subroutine message_str_sint_double ( string , i1 , d1 ) !! 文字列 + 単精度整数 + 倍精度実数の出力 character ( len =* ), intent ( in ) :: string !! メーセージ文字列 integer ( SI ), intent ( in ) :: i1 !! 書き出される整数 real ( DR ), intent ( in ) :: d1 !! 書き出される実数 write ( 6 , * ) string , i1 , d1 end subroutine message_str_sint_double","tags":"","loc":"proc/message_str_sint_double.html"},{"title":"ut__assert – Burgers Equation","text":"public subroutine ut__assert(must_be_true, message) アサーション Arguments Type Intent Optional Attributes Name logical, intent(in) :: must_be_true 必須条件 character(len=*), intent(in) :: message 遺言 Calls proc~~ut__assert~~CallsGraph proc~ut__assert ut__assert proc~ut__fatal ut__fatal proc~ut__assert->proc~ut__fatal interface~ut__message ut__message proc~ut__fatal->interface~ut__message proc~message_str message_str interface~ut__message->proc~message_str proc~message_decorated_str message_decorated_str interface~ut__message->proc~message_decorated_str proc~message_str_double_double message_str_double_double interface~ut__message->proc~message_str_double_double proc~message_decorated_str_dint message_decorated_str_dint interface~ut__message->proc~message_decorated_str_dint proc~message_str_double message_str_double interface~ut__message->proc~message_str_double proc~message_str_dint message_str_dint interface~ut__message->proc~message_str_dint proc~message_str_sint_double message_str_sint_double interface~ut__message->proc~message_str_sint_double proc~message_decorated_str_sint message_decorated_str_sint interface~ut__message->proc~message_decorated_str_sint proc~message_str_dint_double message_str_dint_double interface~ut__message->proc~message_str_dint_double proc~message_str_sint message_str_sint interface~ut__message->proc~message_str_sint proc~message_decorated_str_dint->proc~message_decorated_str proc~message_decorated_str_sint->proc~message_decorated_str Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~ut__assert~~CalledByGraph proc~ut__assert ut__assert proc~namelist__get_double namelist__get_double proc~namelist__get_double->proc~ut__assert proc~namelist__get_integer namelist__get_integer proc~namelist__get_integer->proc~ut__assert proc~burgers_equation burgers_equation proc~burgers_equation->proc~namelist__get_double program~main main program~main->proc~namelist__get_double program~main->proc~namelist__get_integer proc~rk4__step rk4__step program~main->proc~rk4__step proc~rk4__step->proc~burgers_equation Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code ut__assert Source Code subroutine ut__assert ( must_be_true , message ) !! アサーション logical , intent ( in ) :: must_be_true !! 必須条件 character ( len =* ), intent ( in ) :: message !! 遺言 if ( . not . must_be_true ) then call ut__fatal ( message ) end if end subroutine ut__assert","tags":"","loc":"proc/ut__assert.html"},{"title":"ut__fatal – Burgers Equation","text":"public subroutine ut__fatal(last_will) 致命的エラー Print the last_will and stop. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: last_will 遺言 Calls proc~~ut__fatal~~CallsGraph proc~ut__fatal ut__fatal interface~ut__message ut__message proc~ut__fatal->interface~ut__message proc~message_str message_str interface~ut__message->proc~message_str proc~message_decorated_str message_decorated_str interface~ut__message->proc~message_decorated_str proc~message_str_double_double message_str_double_double interface~ut__message->proc~message_str_double_double proc~message_decorated_str_dint message_decorated_str_dint interface~ut__message->proc~message_decorated_str_dint proc~message_str_double message_str_double interface~ut__message->proc~message_str_double proc~message_str_dint message_str_dint interface~ut__message->proc~message_str_dint proc~message_str_sint_double message_str_sint_double interface~ut__message->proc~message_str_sint_double proc~message_decorated_str_sint message_decorated_str_sint interface~ut__message->proc~message_decorated_str_sint proc~message_str_dint_double message_str_dint_double interface~ut__message->proc~message_str_dint_double proc~message_str_sint message_str_sint interface~ut__message->proc~message_str_sint proc~message_decorated_str_dint->proc~message_decorated_str proc~message_decorated_str_sint->proc~message_decorated_str Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~ut__fatal~~CalledByGraph proc~ut__fatal ut__fatal proc~namelist__get_double namelist__get_double proc~namelist__get_double->proc~ut__fatal proc~ut__assert ut__assert proc~namelist__get_double->proc~ut__assert proc~namelist__get_integer namelist__get_integer proc~namelist__get_integer->proc~ut__fatal proc~namelist__get_integer->proc~ut__assert proc~ut__assert->proc~ut__fatal proc~rk4__step rk4__step proc~rk4__step->proc~ut__fatal proc~burgers_equation burgers_equation proc~rk4__step->proc~burgers_equation proc~burgers_equation->proc~namelist__get_double program~main main program~main->proc~namelist__get_double program~main->proc~namelist__get_integer program~main->proc~rk4__step Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code ut__fatal Source Code subroutine ut__fatal ( last_will ) !! 致命的エラー !! !!   Print the last_will and stop. !! character ( len =* ), intent ( in ) :: last_will !! 遺言 call ut__message ( '!' , last_will ) stop 'Program stopped by ut__fatal.' end subroutine ut__fatal","tags":"","loc":"proc/ut__fatal.html"},{"title":"ut__message – Burgers Equation","text":"public interface ut__message 文字列（+ 数値）を標準出力に書き出すルーチンの多重定義 message_decorated_なんとか は飾り文字で囲む message_型名[_型名] は文字列の後のその型の数値を同じ行に書く Calls interface~~ut__message~~CallsGraph interface~ut__message ut__message proc~message_str message_str interface~ut__message->proc~message_str proc~message_decorated_str message_decorated_str interface~ut__message->proc~message_decorated_str proc~message_str_double_double message_str_double_double interface~ut__message->proc~message_str_double_double proc~message_decorated_str_dint message_decorated_str_dint interface~ut__message->proc~message_decorated_str_dint proc~message_str_double message_str_double interface~ut__message->proc~message_str_double proc~message_str_dint message_str_dint interface~ut__message->proc~message_str_dint proc~message_str_sint_double message_str_sint_double interface~ut__message->proc~message_str_sint_double proc~message_decorated_str_sint message_decorated_str_sint interface~ut__message->proc~message_decorated_str_sint proc~message_str_dint_double message_str_dint_double interface~ut__message->proc~message_str_dint_double proc~message_str_sint message_str_sint interface~ut__message->proc~message_str_sint proc~message_decorated_str_dint->proc~message_decorated_str proc~message_decorated_str_sint->proc~message_decorated_str Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by interface~~ut__message~~CalledByGraph interface~ut__message ut__message program~main main program~main->interface~ut__message proc~isave iSave program~main->proc~isave proc~namelist__get_double namelist__get_double program~main->proc~namelist__get_double proc~namelist__get_integer namelist__get_integer program~main->proc~namelist__get_integer proc~rk4__step rk4__step program~main->proc~rk4__step proc~isave->interface~ut__message proc~ut__fatal ut__fatal proc~ut__fatal->interface~ut__message proc~namelist__get_double->interface~ut__message proc~namelist__get_double->proc~ut__fatal proc~ut__assert ut__assert proc~namelist__get_double->proc~ut__assert proc~namelist__get_integer->interface~ut__message proc~namelist__get_integer->proc~ut__fatal proc~namelist__get_integer->proc~ut__assert proc~burgers_equation burgers_equation proc~burgers_equation->proc~namelist__get_double proc~rk4__step->proc~ut__fatal proc~rk4__step->proc~burgers_equation proc~ut__assert->proc~ut__fatal var paninterfaceut__messageCalledByGraph = svgPanZoom('#interfaceut__messageCalledByGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures message_decorated_str message_decorated_str_sint message_decorated_str_dint message_str message_str_double message_str_double_double message_str_sint message_str_dint message_str_sint_double message_str_dint_double Module Procedures private subroutine message_decorated_str (mark, string) 飾り文字でメーセージ文を囲む Read more… Arguments Type Intent Optional Attributes Name character, intent(in) :: mark この文字でメーセージを囲む character(len=*), intent(in) :: string 出力メーセージ（文字列） private subroutine message_decorated_str_sint (mark, string, int) 飾り文字でメーセージ文と単精度整数を囲む Read more… Arguments Type Intent Optional Attributes Name character, intent(in) :: mark この文字で全体を囲む character(len=*), intent(in) :: string メーセージ文字列 integer(kind=SI), intent(in) :: int 文字列の後に書く単精度整数 private subroutine message_decorated_str_dint (mark, string, int) 飾り文字でメーセージ文と倍精度整数を囲む Read more… Arguments Type Intent Optional Attributes Name character, intent(in) :: mark この文字で全体を囲む character(len=*), intent(in) :: string メーセージ文字列 integer(kind=DI), intent(in) :: int 文字列の後に書く倍精度整数 private subroutine message_str (string) 普通のprint文 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string メーセージ文字列 private subroutine message_str_double (string, double) 文字列 + 倍精度実数2つの出力 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string メーセージ文字列 real(kind=DR), intent(in) :: double 書き出される実数 private subroutine message_str_double_double (string, double1, double2) 飾り文字でメーセージ文と倍精度実数2つを囲む Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string メーセージ文字列 real(kind=DR), intent(in) :: double1 書き出される実数1 real(kind=DR), intent(in) :: double2 書き出される実数2 private subroutine message_str_sint (string, int) 文字列 + 単精度整数の出力 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string メーセージ文字列 integer(kind=SI), intent(in) :: int 書き出される整数 private subroutine message_str_dint (string, int) 文字列 + 倍精度整数の出力 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string メーセージ文字列 integer(kind=DI), intent(in) :: int 書き出される整数 private subroutine message_str_sint_double (string, i1, d1) 文字列 + 単精度整数 + 倍精度実数の出力 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string メーセージ文字列 integer(kind=SI), intent(in) :: i1 書き出される整数 real(kind=DR), intent(in) :: d1 書き出される実数 private subroutine message_str_dint_double (string, i1, d1) 文字列 + 倍精度整数 + 倍精度実数の出力 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string メーセージ文字列 integer(kind=DI), intent(in) :: i1 書き出される整数 real(kind=DR), intent(in) :: d1 書き出される実数","tags":"","loc":"interface/ut__message.html"},{"title":"burgers_equation – Burgers Equation","text":"private function burgers_equation(nx, dx, psi) バーガーズ方程式の2階中心差分\n 境界点を除いた内側の格子点を更新する Note ここで更新していない境界上の格子点は、\n   境界条件で更新する必要がある。 Arguments Type Intent Optional Attributes Name integer(kind=SI), intent(in) :: nx 格子点数 real(kind=DR), intent(in) :: dx 格子間隔 real(kind=DR), intent(in), dimension(nx) :: psi 振幅（主変数） Return Value real(kind=DR),\n  dimension(nx) 積分後の配列を返す Calls proc~~burgers_equation~~CallsGraph proc~burgers_equation burgers_equation proc~namelist__get_double namelist__get_double proc~burgers_equation->proc~namelist__get_double interface~ut__message ut__message proc~namelist__get_double->interface~ut__message proc~ut__fatal ut__fatal proc~namelist__get_double->proc~ut__fatal proc~ut__assert ut__assert proc~namelist__get_double->proc~ut__assert proc~message_str message_str interface~ut__message->proc~message_str proc~message_decorated_str message_decorated_str interface~ut__message->proc~message_decorated_str proc~message_str_double_double message_str_double_double interface~ut__message->proc~message_str_double_double proc~message_decorated_str_dint message_decorated_str_dint interface~ut__message->proc~message_decorated_str_dint proc~message_str_double message_str_double interface~ut__message->proc~message_str_double proc~message_str_dint message_str_dint interface~ut__message->proc~message_str_dint proc~message_str_sint_double message_str_sint_double interface~ut__message->proc~message_str_sint_double proc~message_decorated_str_sint message_decorated_str_sint interface~ut__message->proc~message_decorated_str_sint proc~message_str_dint_double message_str_dint_double interface~ut__message->proc~message_str_dint_double proc~message_str_sint message_str_sint interface~ut__message->proc~message_str_sint proc~ut__fatal->interface~ut__message proc~ut__assert->proc~ut__fatal proc~message_decorated_str_dint->proc~message_decorated_str proc~message_decorated_str_sint->proc~message_decorated_str var panprocburgers_equationCallsGraph = svgPanZoom('#procburgers_equationCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~burgers_equation~~CalledByGraph proc~burgers_equation burgers_equation proc~rk4__step rk4__step proc~rk4__step->proc~burgers_equation program~main main program~main->proc~rk4__step Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code burgers_equation Source Code function burgers_equation ( nx , dx , psi ) !! バーガーズ方程式の2階中心差分 !! 境界点を除いた内側の格子点を更新する !! @note !!   ここで更新していない境界上の格子点は、 !!   境界条件で更新する必要がある。 integer ( SI ), intent ( in ) :: nx !! 格子点数 real ( DR ), intent ( in ) :: dx !! 格子間隔 real ( DR ), dimension ( nx ), intent ( in ) :: psi !! 振幅（主変数） real ( DR ), dimension ( nx ) :: burgers_equation !! 積分後の配列を返す integer ( SI ) :: i real ( DR ) :: dx1 ! 一階差分演算子（定数）割り算削減のため定義 real ( DR ) :: dx2 ! 二階差分演算子（定数）割り算削減のため定義 dx1 = 1.0_DR / ( 2 * dx ) dx2 = namelist__get_double ( 'Diffusion_coeff' ) / ( dx ** 2 ) do i = 2 , nx - 1 burgers_equation ( i ) = - psi ( i ) * dx1 * ( psi ( i + 1 ) - psi ( i - 1 )) & + dx2 * ( psi ( i + 1 ) - 2 * psi ( i ) + psi ( i - 1 )) end do end function burgers_equation","tags":"","loc":"proc/burgers_equation.html"},{"title":"rk4__step – Burgers Equation","text":"public function rk4__step(nth, dt, dx, psi, dpsi_prev) result(dpsi_new) 4段4次のRunge-Kutta法による1ステップ積分の実行 Note 教科書のアルゴリズムをそのまま実装している。\n       メモリを贅沢に使っていることに注意。 Arguments Type Intent Optional Attributes Name character(len=3), intent(in) :: nth 4段の何番目か real(kind=DR), intent(in) :: dt 積分時間刻み real(kind=DR), intent(in) :: dx 格子間隔 real(kind=DR), intent(in), dimension(:) :: psi 被積分関数 real(kind=DR), intent(in), optional dimension(size(psi,dim=1)) :: dpsi_prev 前段の増分 Return Value real(kind=DR),\n  dimension(size(psi,dim=1)) 現段の増分\n 配列で返す Calls proc~~rk4__step~~CallsGraph proc~rk4__step rk4__step proc~burgers_equation burgers_equation proc~rk4__step->proc~burgers_equation proc~ut__fatal ut__fatal proc~rk4__step->proc~ut__fatal proc~namelist__get_double namelist__get_double proc~burgers_equation->proc~namelist__get_double interface~ut__message ut__message proc~ut__fatal->interface~ut__message proc~message_str message_str interface~ut__message->proc~message_str proc~message_decorated_str message_decorated_str interface~ut__message->proc~message_decorated_str proc~message_str_double_double message_str_double_double interface~ut__message->proc~message_str_double_double proc~message_decorated_str_dint message_decorated_str_dint interface~ut__message->proc~message_decorated_str_dint proc~message_str_double message_str_double interface~ut__message->proc~message_str_double proc~message_str_dint message_str_dint interface~ut__message->proc~message_str_dint proc~message_str_sint_double message_str_sint_double interface~ut__message->proc~message_str_sint_double proc~message_decorated_str_sint message_decorated_str_sint interface~ut__message->proc~message_decorated_str_sint proc~message_str_dint_double message_str_dint_double interface~ut__message->proc~message_str_dint_double proc~message_str_sint message_str_sint interface~ut__message->proc~message_str_sint proc~namelist__get_double->proc~ut__fatal proc~namelist__get_double->interface~ut__message proc~ut__assert ut__assert proc~namelist__get_double->proc~ut__assert proc~ut__assert->proc~ut__fatal proc~message_decorated_str_dint->proc~message_decorated_str proc~message_decorated_str_sint->proc~message_decorated_str var panprocrk4__stepCallsGraph = svgPanZoom('#procrk4__stepCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~rk4__step~~CalledByGraph proc~rk4__step rk4__step program~main main program~main->proc~rk4__step Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code rk4__step Source Code function rk4__step ( nth , dt , dx , psi , dpsi_prev ) result ( dpsi_new ) !! 4段4次のRunge-Kutta法による1ステップ積分の実行 !! @note 教科書のアルゴリズムをそのまま実装している。 !!       メモリを贅沢に使っていることに注意。 character ( len = 3 ), intent ( in ) :: nth !! 4段の何番目か real ( DR ), intent ( in ) :: dt !! 積分時間刻み real ( DR ), intent ( in ) :: dx !! 格子間隔 real ( DR ), dimension (:), intent ( in ) :: psi !! 被積分関数 real ( DR ), dimension ( size ( psi , dim = 1 )), intent ( in ), optional :: dpsi_prev !! 前段の増分 real ( DR ), dimension ( size ( psi , dim = 1 )) :: dpsi_new !! 現段の増分 !! 配列で返す real ( DR ), dimension ( size ( psi , dim = 1 )) :: psi_ ! 作業配列 ! 古典的な4段4次のRunge-Kutta積分法 select case ( nth ) case ( '1st' ) ! 第1段 dpsi_new (:) = dt * burgers_equation ( size ( psi , dim = 1 ), dx , psi ) case ( '2nd' ) ! 第2段 psi_ (:) = psi (:) + dpsi_prev (:) * 0.5_DR dpsi_new (:) = dt * burgers_equation ( size ( psi , dim = 1 ), dx , psi_ ) case ( '3rd' ) ! 第3段 psi_ (:) = psi (:) + dpsi_prev (:) * 0.5_DR dpsi_new (:) = dt * burgers_equation ( size ( psi , dim = 1 ), dx , psi_ ) case ( '4th' ) ! 第4段 psi_ (:) = psi (:) + dpsi_prev (:) dpsi_new (:) = dt * burgers_equation ( size ( psi , dim = 1 ), dx , psi_ ) case default call ut__fatal ( '<rk4> Invalid step.' ) end select end function rk4__step","tags":"","loc":"proc/rk4__step.html"},{"title":"iBoundary_condition – Burgers Equation","text":"subroutine iBoundary_condition(psi) Arguments Type Intent Optional Attributes Name real(kind=DR), intent(inout), dimension(nx) :: psi Called by proc~~iboundary_condition~~CalledByGraph proc~iboundary_condition iBoundary_condition program~main main program~main->proc~iboundary_condition Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code iBoundary_condition Source Code subroutine iBoundary_condition ( psi ) real ( DR ), dimension ( nx ), intent ( inout ) :: psi psi ( 1 ) = psi ( nx - 1 ) psi ( nx ) = psi ( 2 ) end subroutine iBoundary_condition","tags":"","loc":"proc/iboundary_condition.html"},{"title":"iSave – Burgers Equation","text":"subroutine iSave() Arguments None Calls proc~~isave~~CallsGraph proc~isave iSave interface~ut__message ut__message proc~isave->interface~ut__message proc~ut__i2c3 ut__i2c3 proc~isave->proc~ut__i2c3 proc~message_str message_str interface~ut__message->proc~message_str proc~message_decorated_str message_decorated_str interface~ut__message->proc~message_decorated_str proc~message_str_double_double message_str_double_double interface~ut__message->proc~message_str_double_double proc~message_decorated_str_dint message_decorated_str_dint interface~ut__message->proc~message_decorated_str_dint proc~message_str_double message_str_double interface~ut__message->proc~message_str_double proc~message_str_dint message_str_dint interface~ut__message->proc~message_str_dint proc~message_str_sint_double message_str_sint_double interface~ut__message->proc~message_str_sint_double proc~message_decorated_str_sint message_decorated_str_sint interface~ut__message->proc~message_decorated_str_sint proc~message_str_dint_double message_str_dint_double interface~ut__message->proc~message_str_dint_double proc~message_str_sint message_str_sint interface~ut__message->proc~message_str_sint proc~message_decorated_str_dint->proc~message_decorated_str proc~message_decorated_str_sint->proc~message_decorated_str Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~isave~~CalledByGraph proc~isave iSave program~main main program~main->proc~isave Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code iSave Source Code subroutine iSave integer ( SI ), save :: counter = 0 integer ( SI ) :: i open ( 10 , file = \"output.data\" // '.' // ut__i2c3 ( counter )) do i = 1 , nx write ( 10 , * ) xpos ( i ), psi ( i ) end do close ( 10 ) counter = counter + 1 call ut__message ( \" Data saved at nloop, time = \" , nloop , time ) end subroutine iSave","tags":"","loc":"proc/isave.html"},{"title":"namelist__get_double – Burgers Equation","text":"public function namelist__get_double(variable) このモジュールの外からの問い合わせに応じてnamelistデータを返す。\n その変数が倍精度浮動小数点数の場合。\n この関数の前にnamelist__readが呼ばれている必要がある。\n この点はassertで確認している。 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: variable 問い合わせ変数 Return Value real(kind=DR) 保持データをそのまま返す Calls proc~~namelist__get_double~~CallsGraph proc~namelist__get_double namelist__get_double interface~ut__message ut__message proc~namelist__get_double->interface~ut__message proc~ut__fatal ut__fatal proc~namelist__get_double->proc~ut__fatal proc~ut__assert ut__assert proc~namelist__get_double->proc~ut__assert proc~message_str message_str interface~ut__message->proc~message_str proc~message_decorated_str message_decorated_str interface~ut__message->proc~message_decorated_str proc~message_str_double_double message_str_double_double interface~ut__message->proc~message_str_double_double proc~message_decorated_str_dint message_decorated_str_dint interface~ut__message->proc~message_decorated_str_dint proc~message_str_double message_str_double interface~ut__message->proc~message_str_double proc~message_str_dint message_str_dint interface~ut__message->proc~message_str_dint proc~message_str_sint_double message_str_sint_double interface~ut__message->proc~message_str_sint_double proc~message_decorated_str_sint message_decorated_str_sint interface~ut__message->proc~message_decorated_str_sint proc~message_str_dint_double message_str_dint_double interface~ut__message->proc~message_str_dint_double proc~message_str_sint message_str_sint interface~ut__message->proc~message_str_sint proc~ut__fatal->interface~ut__message proc~ut__assert->proc~ut__fatal proc~message_decorated_str_dint->proc~message_decorated_str proc~message_decorated_str_sint->proc~message_decorated_str var panprocnamelist__get_doubleCallsGraph = svgPanZoom('#procnamelist__get_doubleCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~namelist__get_double~~CalledByGraph proc~namelist__get_double namelist__get_double proc~burgers_equation burgers_equation proc~burgers_equation->proc~namelist__get_double program~main main program~main->proc~namelist__get_double proc~rk4__step rk4__step program~main->proc~rk4__step proc~rk4__step->proc~burgers_equation Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code namelist__get_double Source Code function namelist__get_double ( variable ) !! このモジュールの外からの問い合わせに応じてnamelistデータを返す。 !! その変数が倍精度浮動小数点数の場合。 !! この関数の前にnamelist__readが呼ばれている必要がある。 !! この点はassertで確認している。 character ( len =* ), intent ( in ) :: variable !! 問い合わせ変数 real ( DR ) :: namelist__get_double !! 保持データをそのまま返す call ut__assert ( Read_done , & '<namelist__get_double> Read namelist first.' ) select case ( variable ) case ( 'Diffusion_coeff' ) namelist__get_double = Diffusion_coeff case default call ut__message ( '? arg = ' , variable ) call ut__fatal ( '<namelist__get_double> not in the namelist?' ) end select end function namelist__get_double","tags":"","loc":"proc/namelist__get_double.html"},{"title":"namelist__get_integer – Burgers Equation","text":"public function namelist__get_integer(variable) このモジュールの外からの問い合わせに応じてnamelistデータを返す。\n その変数が整数の場合。\n この関数の前にnamelist__readが呼ばれている必要がある。\n この点はassertで確認している。 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: variable Return Value integer(kind=SI) Calls proc~~namelist__get_integer~~CallsGraph proc~namelist__get_integer namelist__get_integer interface~ut__message ut__message proc~namelist__get_integer->interface~ut__message proc~ut__fatal ut__fatal proc~namelist__get_integer->proc~ut__fatal proc~ut__assert ut__assert proc~namelist__get_integer->proc~ut__assert proc~message_str message_str interface~ut__message->proc~message_str proc~message_decorated_str message_decorated_str interface~ut__message->proc~message_decorated_str proc~message_str_double_double message_str_double_double interface~ut__message->proc~message_str_double_double proc~message_decorated_str_dint message_decorated_str_dint interface~ut__message->proc~message_decorated_str_dint proc~message_str_double message_str_double interface~ut__message->proc~message_str_double proc~message_str_dint message_str_dint interface~ut__message->proc~message_str_dint proc~message_str_sint_double message_str_sint_double interface~ut__message->proc~message_str_sint_double proc~message_decorated_str_sint message_decorated_str_sint interface~ut__message->proc~message_decorated_str_sint proc~message_str_dint_double message_str_dint_double interface~ut__message->proc~message_str_dint_double proc~message_str_sint message_str_sint interface~ut__message->proc~message_str_sint proc~ut__fatal->interface~ut__message proc~ut__assert->proc~ut__fatal proc~message_decorated_str_dint->proc~message_decorated_str proc~message_decorated_str_sint->proc~message_decorated_str var panprocnamelist__get_integerCallsGraph = svgPanZoom('#procnamelist__get_integerCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~namelist__get_integer~~CalledByGraph proc~namelist__get_integer namelist__get_integer program~main main program~main->proc~namelist__get_integer Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code namelist__get_integer Source Code function namelist__get_integer ( variable ) !! このモジュールの外からの問い合わせに応じてnamelistデータを返す。 !! その変数が整数の場合。 !! この関数の前にnamelist__readが呼ばれている必要がある。 !! この点はassertで確認している。 character ( len =* ), intent ( in ) :: variable integer ( SI ) :: namelist__get_integer call ut__assert ( Read_done , & '<namelist__get_integer> Read namelist first.' ) select case ( variable ) case ( 'Nx' ) namelist__get_integer = Nx case default call ut__message ( '? arg = ' , variable ) call ut__fatal ( '<namelist__get_integer> not in the namelist?' ) end select end function namelist__get_integer","tags":"","loc":"proc/namelist__get_integer.html"},{"title":"namelist__read – Burgers Equation","text":"public subroutine namelist__read() namelistファイルをディスクから読み込む。\n ファイル名はコマンド第一引数。 Note ファイル番号10番をここで使っている。他の場所で\n 10番を使う（開きっぱなしにする）場合は問題だが、\n その場所でもここのようにopenした後、closeしていれば\n 特に問題ではない。 Note namelistデータファイルの内容を変更する場合は\n 当然ながら以下のread文も適宜変更すること。 Arguments None Called by proc~~namelist__read~~CalledByGraph proc~namelist__read namelist__read program~main main program~main->proc~namelist__read Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code namelist__read Source Code subroutine namelist__read !! namelistファイルをディスクから読み込む。 !! ファイル名はコマンド第一引数。 !! @note ファイル番号10番をここで使っている。他の場所で !! 10番を使う（開きっぱなしにする）場合は問題だが、 !! その場所でもここのようにopenした後、closeしていれば !! 特に問題ではない。 !! !! @note namelistデータファイルの内容を変更する場合は !! 当然ながら以下のread文も適宜変更すること。 !! integer ( SI ), parameter :: FILENAME_MAX_LENGTH = 200 ! 200文字もあれば十分だろう。 character ( len = FILENAME_MAX_LENGTH ) :: filename !--------------------------------------- ! namelistデータファイルの中身 ! &data00 Nx = 500 / ! &data01 Diffusion_coeff = 0.005 / !--------------------------------------- call ut__assert ( command_argument_count () == 1 , & \"Usage: berguers param_file\" ) call get_command_argument ( 1 , filename ) open ( 10 , file = trim ( filename )) read ( 10 , nml = data00 ) read ( 10 , nml = data01 ) close ( 10 ) write ( 6 , nml = data00 ) write ( 6 , nml = data01 ) Read_done = . true . end subroutine namelist__read","tags":"","loc":"proc/namelist__read.html"},{"title":"constants_m – Burgers Equation","text":"Fortran定数と数学定数 Note 定数であることが目で見てわかりやすいように全ての文字を\n      大文字で書く。コンパイラには無意味であるので、\n      siとかSiといった変数を使わないように注意。 Used by module~~constants_m~~UsedByGraph module~constants_m constants_m module~ut_m ut_m module~ut_m->module~constants_m module~namelist_m namelist_m module~namelist_m->module~constants_m module~namelist_m->module~ut_m module~rk4_m rk4_m module~rk4_m->module~constants_m module~rk4_m->module~ut_m module~rk4_m->module~namelist_m program~main main program~main->module~constants_m program~main->module~ut_m program~main->module~namelist_m program~main->module~rk4_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables DI DR PI SI SR TWOPI Variables Type Visibility Attributes Name Initial integer, public, parameter :: DI = selected_int_kind(16) 倍精度整数種別値 integer, public, parameter :: DR = selected_real_kind(12) 倍精度実数種別値 real(kind=DR), public, parameter :: PI = 3.1415926535897932_DR 円周率 integer, public, parameter :: SI = selected_int_kind(8) 単精度整数種別値 integer, public, parameter :: SR = selected_real_kind(6) 単精度実数種別値 real(kind=DR), public, parameter :: TWOPI = PI*2 円周率の2倍","tags":"","loc":"module/constants_m.html"},{"title":"ut_m – Burgers Equation","text":"ユーティリティライブラリ Note これは教育用のコードである。\n        メモリの節約については全く考慮していない。 Uses constants_m module~~ut_m~~UsesGraph module~ut_m ut_m module~constants_m constants_m module~ut_m->module~constants_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by module~~ut_m~~UsedByGraph module~ut_m ut_m program~main main program~main->module~ut_m module~namelist_m namelist_m program~main->module~namelist_m module~rk4_m rk4_m program~main->module~rk4_m module~namelist_m->module~ut_m module~rk4_m->module~ut_m module~rk4_m->module~namelist_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces ut__message Functions ut__i2c3 Subroutines message_decorated_str message_decorated_str_dint message_decorated_str_sint message_str message_str_dint message_str_dint_double message_str_double message_str_double_double message_str_sint message_str_sint_double ut__assert ut__fatal Interfaces public interface ut__message 文字列（+ 数値）を標準出力に書き出すルーチンの多重定義 Read more… private subroutine message_decorated_str (mark, string) 飾り文字でメーセージ文を囲む Read more… Arguments Type Intent Optional Attributes Name character, intent(in) :: mark この文字でメーセージを囲む character(len=*), intent(in) :: string 出力メーセージ（文字列） private subroutine message_decorated_str_sint (mark, string, int) 飾り文字でメーセージ文と単精度整数を囲む Read more… Arguments Type Intent Optional Attributes Name character, intent(in) :: mark この文字で全体を囲む character(len=*), intent(in) :: string メーセージ文字列 integer(kind=SI), intent(in) :: int 文字列の後に書く単精度整数 private subroutine message_decorated_str_dint (mark, string, int) 飾り文字でメーセージ文と倍精度整数を囲む Read more… Arguments Type Intent Optional Attributes Name character, intent(in) :: mark この文字で全体を囲む character(len=*), intent(in) :: string メーセージ文字列 integer(kind=DI), intent(in) :: int 文字列の後に書く倍精度整数 private subroutine message_str (string) 普通のprint文 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string メーセージ文字列 private subroutine message_str_double (string, double) 文字列 + 倍精度実数2つの出力 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string メーセージ文字列 real(kind=DR), intent(in) :: double 書き出される実数 private subroutine message_str_double_double (string, double1, double2) 飾り文字でメーセージ文と倍精度実数2つを囲む Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string メーセージ文字列 real(kind=DR), intent(in) :: double1 書き出される実数1 real(kind=DR), intent(in) :: double2 書き出される実数2 private subroutine message_str_sint (string, int) 文字列 + 単精度整数の出力 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string メーセージ文字列 integer(kind=SI), intent(in) :: int 書き出される整数 private subroutine message_str_dint (string, int) 文字列 + 倍精度整数の出力 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string メーセージ文字列 integer(kind=DI), intent(in) :: int 書き出される整数 private subroutine message_str_sint_double (string, i1, d1) 文字列 + 単精度整数 + 倍精度実数の出力 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string メーセージ文字列 integer(kind=SI), intent(in) :: i1 書き出される整数 real(kind=DR), intent(in) :: d1 書き出される実数 private subroutine message_str_dint_double (string, i1, d1) 文字列 + 倍精度整数 + 倍精度実数の出力 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string メーセージ文字列 integer(kind=DI), intent(in) :: i1 書き出される整数 real(kind=DR), intent(in) :: d1 書き出される実数 Functions public function ut__i2c3 (i) 整数を文字列（3文字固定）に変換する Read more… Arguments Type Intent Optional Attributes Name integer(kind=SI), intent(in) :: i Return Value character(len=3) Subroutines private subroutine message_decorated_str (mark, string) 飾り文字でメーセージ文を囲む Read more… Arguments Type Intent Optional Attributes Name character, intent(in) :: mark この文字でメーセージを囲む character(len=*), intent(in) :: string 出力メーセージ（文字列） private subroutine message_decorated_str_dint (mark, string, int) 飾り文字でメーセージ文と倍精度整数を囲む Read more… Arguments Type Intent Optional Attributes Name character, intent(in) :: mark この文字で全体を囲む character(len=*), intent(in) :: string メーセージ文字列 integer(kind=DI), intent(in) :: int 文字列の後に書く倍精度整数 private subroutine message_decorated_str_sint (mark, string, int) 飾り文字でメーセージ文と単精度整数を囲む Read more… Arguments Type Intent Optional Attributes Name character, intent(in) :: mark この文字で全体を囲む character(len=*), intent(in) :: string メーセージ文字列 integer(kind=SI), intent(in) :: int 文字列の後に書く単精度整数 private subroutine message_str (string) 普通のprint文 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string メーセージ文字列 private subroutine message_str_dint (string, int) 文字列 + 倍精度整数の出力 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string メーセージ文字列 integer(kind=DI), intent(in) :: int 書き出される整数 private subroutine message_str_dint_double (string, i1, d1) 文字列 + 倍精度整数 + 倍精度実数の出力 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string メーセージ文字列 integer(kind=DI), intent(in) :: i1 書き出される整数 real(kind=DR), intent(in) :: d1 書き出される実数 private subroutine message_str_double (string, double) 文字列 + 倍精度実数2つの出力 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string メーセージ文字列 real(kind=DR), intent(in) :: double 書き出される実数 private subroutine message_str_double_double (string, double1, double2) 飾り文字でメーセージ文と倍精度実数2つを囲む Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string メーセージ文字列 real(kind=DR), intent(in) :: double1 書き出される実数1 real(kind=DR), intent(in) :: double2 書き出される実数2 private subroutine message_str_sint (string, int) 文字列 + 単精度整数の出力 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string メーセージ文字列 integer(kind=SI), intent(in) :: int 書き出される整数 private subroutine message_str_sint_double (string, i1, d1) 文字列 + 単精度整数 + 倍精度実数の出力 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string メーセージ文字列 integer(kind=SI), intent(in) :: i1 書き出される整数 real(kind=DR), intent(in) :: d1 書き出される実数 public subroutine ut__assert (must_be_true, message) アサーション Arguments Type Intent Optional Attributes Name logical, intent(in) :: must_be_true 必須条件 character(len=*), intent(in) :: message 遺言 public subroutine ut__fatal (last_will) 致命的エラー Read more… Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: last_will 遺言","tags":"","loc":"module/ut_m.html"},{"title":"rk4_m – Burgers Equation","text":"古典的4次ルンゲ=クッタ積分法モジュール Note これは教育用のコードである。\n        メモリの節約については全く考慮していない。 Uses constants_m namelist_m ut_m module~~rk4_m~~UsesGraph module~rk4_m rk4_m module~ut_m ut_m module~rk4_m->module~ut_m module~constants_m constants_m module~rk4_m->module~constants_m module~namelist_m namelist_m module~rk4_m->module~namelist_m module~ut_m->module~constants_m module~namelist_m->module~ut_m module~namelist_m->module~constants_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by module~~rk4_m~~UsedByGraph module~rk4_m rk4_m program~main main program~main->module~rk4_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Functions burgers_equation rk4__step Functions private function burgers_equation (nx, dx, psi) バーガーズ方程式の2階中心差分\n 境界点を除いた内側の格子点を更新する Read more… Arguments Type Intent Optional Attributes Name integer(kind=SI), intent(in) :: nx 格子点数 real(kind=DR), intent(in) :: dx 格子間隔 real(kind=DR), intent(in), dimension(nx) :: psi 振幅（主変数） Return Value real(kind=DR),\n  dimension(nx) 積分後の配列を返す public function rk4__step (nth, dt, dx, psi, dpsi_prev) result(dpsi_new) 4段4次のRunge-Kutta法による1ステップ積分の実行 Read more… Arguments Type Intent Optional Attributes Name character(len=3), intent(in) :: nth 4段の何番目か real(kind=DR), intent(in) :: dt 積分時間刻み real(kind=DR), intent(in) :: dx 格子間隔 real(kind=DR), intent(in), dimension(:) :: psi 被積分関数 real(kind=DR), intent(in), optional dimension(size(psi,dim=1)) :: dpsi_prev 前段の増分 Return Value real(kind=DR),\n  dimension(size(psi,dim=1)) 現段の増分\n 配列で返す","tags":"","loc":"module/rk4_m.html"},{"title":"namelist_m – Burgers Equation","text":"Fortranのnamelist機能を使い、入力データを読み込み、\n  管理するモジュール 目的 namelistデータの一元管理 機能 入力パラメータを読み込み、保持する。要求に応じて値を教える。 Note 実行ファイルのコマンドオプションでnamelistファイルを\n  指定すると仮定している。 Note namelistファイルの内容を変更した場合は:\n    (1) 少し下の行にあるこのファイルのnamelist文を書き換える。\n    (2) namelist__readを書き換える。\n    (3) namelist__get_double, _integer等の対応する行も書き換える。 Note 浮動小数点数（double）や整数以外のデータをnamelistで受け取る\n  場合は、namelsit__get_logical等、新たに作る必要がある Uses constants_m ut_m module~~namelist_m~~UsesGraph module~namelist_m namelist_m module~ut_m ut_m module~namelist_m->module~ut_m module~constants_m constants_m module~namelist_m->module~constants_m module~ut_m->module~constants_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by module~~namelist_m~~UsedByGraph module~namelist_m namelist_m program~main main program~main->module~namelist_m module~rk4_m rk4_m program~main->module~rk4_m module~rk4_m->module~namelist_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables Diffusion_coeff Nx Read_done Functions namelist__get_double namelist__get_integer Subroutines namelist__read Variables Type Visibility Attributes Name Initial real(kind=DR), private :: Diffusion_coeff integer(kind=SI), private :: Nx logical, private, save :: Read_done = .false. Functions public function namelist__get_double (variable) このモジュールの外からの問い合わせに応じてnamelistデータを返す。\n その変数が倍精度浮動小数点数の場合。\n この関数の前にnamelist__readが呼ばれている必要がある。\n この点はassertで確認している。 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: variable 問い合わせ変数 Return Value real(kind=DR) 保持データをそのまま返す public function namelist__get_integer (variable) このモジュールの外からの問い合わせに応じてnamelistデータを返す。\n その変数が整数の場合。\n この関数の前にnamelist__readが呼ばれている必要がある。\n この点はassertで確認している。 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: variable Return Value integer(kind=SI) Subroutines public subroutine namelist__read () namelistファイルをディスクから読み込む。\n ファイル名はコマンド第一引数。 Read more… Arguments None","tags":"","loc":"module/namelist_m.html"},{"title":"main – Burgers Equation","text":"Uses constants_m ut_m namelist_m rk4_m program~~main~~UsesGraph program~main main module~ut_m ut_m program~main->module~ut_m module~constants_m constants_m program~main->module~constants_m module~namelist_m namelist_m program~main->module~namelist_m module~rk4_m rk4_m program~main->module~rk4_m module~ut_m->module~constants_m module~namelist_m->module~ut_m module~namelist_m->module~constants_m module~rk4_m->module~ut_m module~rk4_m->module~constants_m module~rk4_m->module~namelist_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. バーガース方程式を差分法+ルンゲ・クッタ積分法で解き、可視化する。 神戸大学情報知能工学科の講義 \"HPC\" （B3対象）用サンプルコード 目的 この後に説明する3次元Smoke-Ringシミュレーションコードを理解するため。 3次元Smoke-Ringシミュレーションコードでは\n  基本方程式は違うものの、アルゴリズム（差分法+ルンゲ・クッタ積分法）\n  とシミュレーションコードの構造が同じである。 実行方法 cd src ; make cd ../slice_grapher; make Calls program~~main~~CallsGraph program~main main interface~ut__message ut__message program~main->interface~ut__message proc~isave iSave program~main->proc~isave proc~iboundary_condition iBoundary_condition program~main->proc~iboundary_condition proc~rk4__step rk4__step program~main->proc~rk4__step proc~namelist__read namelist__read program~main->proc~namelist__read proc~namelist__get_double namelist__get_double program~main->proc~namelist__get_double proc~namelist__get_integer namelist__get_integer program~main->proc~namelist__get_integer proc~message_str message_str interface~ut__message->proc~message_str proc~message_decorated_str message_decorated_str interface~ut__message->proc~message_decorated_str proc~message_str_double_double message_str_double_double interface~ut__message->proc~message_str_double_double proc~message_decorated_str_dint message_decorated_str_dint interface~ut__message->proc~message_decorated_str_dint proc~message_str_double message_str_double interface~ut__message->proc~message_str_double proc~message_str_dint message_str_dint interface~ut__message->proc~message_str_dint proc~message_str_sint_double message_str_sint_double interface~ut__message->proc~message_str_sint_double proc~message_decorated_str_sint message_decorated_str_sint interface~ut__message->proc~message_decorated_str_sint proc~message_str_dint_double message_str_dint_double interface~ut__message->proc~message_str_dint_double proc~message_str_sint message_str_sint interface~ut__message->proc~message_str_sint proc~isave->interface~ut__message proc~ut__i2c3 ut__i2c3 proc~isave->proc~ut__i2c3 proc~burgers_equation burgers_equation proc~rk4__step->proc~burgers_equation proc~ut__fatal ut__fatal proc~rk4__step->proc~ut__fatal proc~namelist__get_double->interface~ut__message proc~ut__assert ut__assert proc~namelist__get_double->proc~ut__assert proc~namelist__get_double->proc~ut__fatal proc~namelist__get_integer->interface~ut__message proc~namelist__get_integer->proc~ut__assert proc~namelist__get_integer->proc~ut__fatal proc~ut__assert->proc~ut__fatal proc~message_decorated_str_dint->proc~message_decorated_str proc~burgers_equation->proc~namelist__get_double proc~message_decorated_str_sint->proc~message_decorated_str proc~ut__fatal->interface~ut__message var panprogrammainCallsGraph = svgPanZoom('#programmainCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables CFL_FACTOR ONE_SIXTH dpsi01 dpsi02 dpsi03 dpsi04 dt dx i nloop nloop_max nx psi time x xpos Subroutines iBoundary_condition iSave Source Code main Variables Type Attributes Name Initial real(kind=DR), parameter :: CFL_FACTOR = 0.4_DR real(kind=DR), parameter :: ONE_SIXTH = 1.0_DR/6.0_DR real(kind=DR), dimension(:), allocatable :: dpsi01 real(kind=DR), dimension(:), allocatable :: dpsi02 real(kind=DR), dimension(:), allocatable :: dpsi03 real(kind=DR), dimension(:), allocatable :: dpsi04 real(kind=DR) :: dt real(kind=DR) :: dx integer(kind=SI) :: i integer(kind=DI) :: nloop integer(kind=DI) :: nloop_max = 1000 integer(kind=SI) :: nx real(kind=DR), dimension(:), allocatable :: psi real(kind=DR) :: time real(kind=DR) :: x real(kind=DR), dimension(:), allocatable :: xpos Subroutines subroutine iBoundary_condition (psi) Arguments Type Intent Optional Attributes Name real(kind=DR), intent(inout), dimension(nx) :: psi subroutine iSave () Arguments None Source Code program main use constants_m use ut_m use namelist_m use rk4_m implicit none real ( DR ), dimension (:), allocatable :: xpos ! grid position, size=nx real ( DR ), dimension (:), allocatable :: psi ! size=nx real ( DR ), dimension (:), allocatable :: dpsi01 , dpsi02 , & ! used for RK4. dpsi03 , dpsi04 integer ( SI ) :: i , nx integer ( DI ) :: nloop integer ( DI ) :: nloop_max = 1000 real ( DR ) :: dx , dt , time , x real ( DR ), parameter :: ONE_SIXTH = 1.0_DR / 6.0_DR real ( DR ), parameter :: CFL_FACTOR = 0.4_DR !    1    2    3    4                                    NX-1  NX !    !----!----!----!----!----!--             --!----!----!----! !         !               \\  /                                 ! !         !                dx = TWOPI / (nx-2)                 ! !    x=-PI!<---------------------- TWOPI --------------------->!x=+PI !         !                                                    ! !         !                                                    ! !  --!----!                                                !---!-- !  NX-1  NX                                                1   2 call namelist__read nx = namelist__get_integer ( 'Nx' ) dx = TWOPI / ( nx - 2 ) ! See above fig. dt = dx ** 2 / namelist__get_double ( 'Diffusion_coeff' ) * CFL_FACTOR allocate ( xpos ( nx ), psi ( nx )) allocate ( dpsi01 ( nx )) allocate ( dpsi02 ( nx )) allocate ( dpsi03 ( nx )) allocate ( dpsi04 ( nx )) xpos (:) = 0.0_DR psi (:) = 0.0_DR dpsi01 (:) = 0.0_DR dpsi02 (:) = 0.0_DR dpsi03 (:) = 0.0_DR dpsi04 (:) = 0.0_DR do i = 1 , nx xpos ( i ) = - PI + dx * ( i - 2 ) ! Grid location end do do i = 1 , nx x = xpos ( i ) psi ( i ) = 0.8_DR + 0.2_DR * cos ( x ) ! Initial condition end do call ut__message ( 'initial check: nx = ' , nx ) call ut__message ( 'initial check: dx = ' , dx ) time = 0.0_DR call iSave ! Save the initial condition profile to the disk. do nloop = 1 , nloop_max !--< Runge-Kutta step 1 >--! dpsi01 (:) = rk4__step ( '1st' , dt , dx , psi ) call iBoundary_condition ( dpsi01 ) !--< Runge-Kutta step 2 >--! dpsi02 (:) = rk4__step ( '2nd' , dt , dx , psi , dpsi01 ) call iBoundary_condition ( dpsi02 ) !--< Runge-Kutta step 3 >--! dpsi03 (:) = rk4__step ( '3rd' , dt , dx , psi , dpsi02 ) call iBoundary_condition ( dpsi03 ) !--< Runge-Kutta step 4 >--! dpsi04 (:) = rk4__step ( '4th' , dt , dx , psi , dpsi03 ) call iBoundary_condition ( dpsi04 ) time = time + dt psi (:) = psi (:) + ONE_SIXTH * ( dpsi01 (:) & + 2 * dpsi02 (:) & + 2 * dpsi03 (:) & + dpsi04 (:)) if ( mod ( nloop , 4 ) == 0 ) then call iSave ! Save the profile to the disk. end if end do contains subroutine iBoundary_condition ( psi ) real ( DR ), dimension ( nx ), intent ( inout ) :: psi psi ( 1 ) = psi ( nx - 1 ) psi ( nx ) = psi ( 2 ) end subroutine iBoundary_condition subroutine iSave integer ( SI ), save :: counter = 0 integer ( SI ) :: i open ( 10 , file = \"output.data\" // '.' // ut__i2c3 ( counter )) do i = 1 , nx write ( 10 , * ) xpos ( i ), psi ( i ) end do close ( 10 ) counter = counter + 1 call ut__message ( \" Data saved at nloop, time = \" , nloop , time ) end subroutine iSave end program main","tags":"","loc":"program/main.html"}]}